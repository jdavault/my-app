- task: CmdLine@2.*
  displayName: 'Uppercase the downloaded Artifact directory names'
  inputs:
    script: |
      cd *
      ls -lah
      for i in $( ls | grep [a-z] ); do mv -i $i `echo $i | tr 'a-z' 'A-Z'`; done
      ls -lah
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: ShellScript@3.*
  displayName: 'Set Derived Variables'
  inputs:
    targetType: inline
    script: |
      TERRAFORM_PATH_PREFIX="./"
      WORKING_DIRECTORY_SUFFIX="/dist"
      HAS_PLAN_FILE=`test -e tfplan && echo true || echo false`
      HAS_DIST_DIR=`[ -d dist ] && echo true || echo false`
      TERRAFORM_VERSION=`cat terraform-version.txt`
      echo "##vso[task.setvariable variable=hasPlanFile]$HAS_PLAN_FILE"
      echo "##vso[task.setvariable variable=hasDistDir]$HAS_DIST_DIR"
      echo "##vso[task.setvariable variable=terraformVersion]$TERRAFORM_VERSION"
      echo hasPlanFile=$HAS_PLAN_FILE
      if [ $HAS_PLAN_FILE = "true" ]; then
        echo "##vso[task.setvariable variable=terraformPathPrefix]$TERRAFORM_PATH_PREFIX"
        echo terraformPathPrefix = $TERRAFORM_PATH_PREFIX
      else
        echo "##vso[task.setvariable variable=terraformPathPrefix]"
      fi
      if [ $HAS_DIST_DIR = "true" ]; then
        echo "##vso[task.setvariable variable=workingDirectorySuffix]$WORKING_DIRECTORY_SUFFIX"
        echo workingDirectorySuffix = $WORKING_DIRECTORY_SUFFIX
      else
        echo "##vso[task.setvariable variable=workingDirectorySuffix]"
      fi
    workingDirectory: $(artifactRoot)
- task: CmdLine@2.*
  displayName: 'Add Permissions to Terragrunt & Terraform'
  inputs:
    script: |
      chmod -R 755 *
      chmod -R 755 .terraform/
      ls -lrt
      ls -lrt  .terraform/plugins/linux_amd64/
    workingDirectory: $(artifactRoot)$(workingDirectorySuffix)
- task: CmdLine@2.*
  displayName: 'Rename Existing Build Pipeline Plan'
  condition: and(succeeded(), eq(variables['hasPlanFile'], 'true'))
  inputs:
    script: |
      mv tfplan $(Release.ReleaseName).tfplan
    workingDirectory: $(artifactRoot)$(workingDirectorySuffix)
- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0.*
  displayName: 'Use Terraform Version from Build'
  condition: and(succeeded(), eq(variables['hasPlanFile'], 'false'))
  inputs:
    terraformVersion: '$(terraformVersion)'
- task: AmazonWebServices.aws-vsts-tools.AWSShellScript.AWSShellScript@1.*
  displayName: 'Terraform Init'
  condition: and(succeeded(), eq(variables['hasPlanFile'], 'false'))
  inputs:
    awsCredentials: ${aws_credentials}
    regionName: 'us-west-2'
    scriptType: inline
    inlineScript: 'terraform init -no-color'
    disableAutoCwd: true
    workingDirectory: $(artifactRoot)$(workingDirectorySuffix)
- task: AmazonWebServices.aws-vsts-tools.AWSShellScript.AWSShellScript@1.*
  displayName: 'Terraform Plan'
  condition: and(succeeded(), eq(variables['hasPlanFile'], 'false'))
  inputs:
    awsCredentials: ${aws_credentials}
    regionName: 'us-west-2'
    scriptType: inline
    inlineScript: |
      source terragrunt.auto.tfvars.env
      terraform plan -no-color -out=$(Release.ReleaseName).tfplan
    disableAutoCwd: true
    workingDirectory: $(artifactRoot)$(workingDirectorySuffix)
- task: AmazonWebServices.aws-vsts-tools.AWSShellScript.AWSShellScript@1.*
  displayName: 'Create HTML Terraform Plan'
  condition: and(succeeded(), eq(variables['hasPlanFile'], 'false'))
  inputs:
    awsCredentials: ${aws_credentials}
    regionName: 'us-west-2'
    scriptType: inline
    inlineScript: (echo -n '<pre>'; terraform show $(Release.ReleaseName).tfplan | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g' | npx ansi2html; echo -n '</pre>';) > $(Release.ReleaseName).html
    disableAutoCwd: true
    workingDirectory: $(artifactRoot)$(workingDirectorySuffix)
- task: Farrellsoft.publish-html-task.publish-html-task.publishHtml@1.*
  displayName: 'Publish HTML'
  condition: and(succeeded(), eq(variables['hasPlanFile'], 'false'))
  inputs:
    artifactName: Apply
    htmlFilePath: '$(artifactRoot)$(workingDirectorySuffix)/$(Release.ReleaseName).html'
- task: AmazonWebServices.aws-vsts-tools.AWSShellScript.AWSShellScript@1.*
  displayName: 'Terraform Apply'
  inputs:
    awsCredentials: ${aws_credentials}
    regionName: 'us-west-2'
    scriptType: inline
    inlineScript: '$(terraformPathPrefix)terraform apply $(Release.ReleaseName).tfplan -no-color'
    disableAutoCwd: true
    workingDirectory: $(artifactRoot)$(workingDirectorySuffix)
